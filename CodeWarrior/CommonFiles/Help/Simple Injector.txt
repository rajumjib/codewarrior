//http://www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison
//http://codeinthedesert.azurewebsites.net/?p=91

protected void Application_Start()
{
    ConfigureContainer();
}


private static void ConfigureContainer()
{
    var container = new Container();
 
    var services = GlobalConfiguration.Configuration.Services;
    var controllerTypes =    services.GetHttpControllerTypeResolver().GetControllerTypes(services.GetAssembliesResolver());
 
    foreach (var controllerType in controllerTypes)
    {
        container.Register(controllerType);
    }
 
    Bootstrap.BootstrapConfig.Register(container);
 
    //Required to set resolvers differently for WebApi and MVC
    DependencyResolver.SetResolver(new SimpleInjectorDependencyResolver(container));
    GlobalConfiguration.Configuration.DependencyResolver = new SimpleInjectorWebApiDependencyResolver(container);
}

public sealed class SimpleInjectorWebApiDependencyResolver
    : System.Web.Http.Dependencies.IDependencyResolver
{
    private readonly Container container;
 
    public SimpleInjectorWebApiDependencyResolver(
        Container container)
    {
        this.container = container;
    }
 
    [DebuggerStepThrough]
    public IDependencyScope BeginScope()
    {
        return this;
    }
 
    [DebuggerStepThrough]
    public object GetService(Type serviceType)
    {
        return ((IServiceProvider)this.container)
            .GetService(serviceType);
    }
 
    [DebuggerStepThrough]
    public IEnumerable<object> GetServices(Type serviceType)
    {
        return this.container.GetAllInstances(serviceType);
    }
 
    [DebuggerStepThrough]
    public void Dispose()
    {
    }
}


public class UserController : ApiController
{
    private readonly IUserService _UserService;
 
    public UserController(IUserService userService)
    {
        _UserService = userService;
    }
 
    public User Get(string id)
    {
        return _UserService.GetUser(id);
    }
}